DELIMITER //
CREATE TRIGGER waga_before_insert
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
  IF NEW.waga<0
  THEN 
   SET NEW.waga=0;
  END IF;
  END
 // DELIMITER;

CREATE TABLE archiwum_wypraw LIKE wyprawa;
ALTER TABLE archiwum_wypraw MODIFY COLUMN kierownik varchar(45); 
DELIMITER //
CREATE TRIGGER usunieta_wyprawa
AFTER DELETE ON wyprawa
FOR EACH ROW
BEGIN
INSERT INTO archiwum_wypraw VALUES(OLD.id_wyprawy, OLD.nazwa, OLD.data_rozpoczecia, OLD.data_zakonczenia, (SELECT nazwa FROM kreatura WHERE idKreatury=OLD.kierownik));
END
// DELIMITER;

DELIMITER //
CREATE PROCEDURE eliksir_sily(IN id int)
BEGIN
  Update kreatura set udzwig = 1.2 * udzwig where idKreatury = id;
END
// DELIMITER ;

DELIMITER //
CREATE FUNCTION wielkie_litery (tekst VARCHAR(45))
RETURNS VARCHAR(45)
BEGIN
  DECLARE str VARCHAR(45);
  SELECT UPPER(tekst) INTO str;
  RETURN str;
END
// DELIMITER ;

CREATE TABLE system_alarmowy (id_alarmu INT AUTO_INCREMENT, wiadomosc VARCHAR(255), PRIMARY KEY(id_alarmu));
DELIMITER $$
CREATE TRIGGER alarm
AFTER INSERT ON uczestnicy
FOR EACH ROW
BEGIN
  IF 
    (SELECT id_uczestnika=14 FROM uczestnicy WHERE id_wyprawy=NEW.id_wyprawy) AND (SELECT sektor=7 FROM etapy_wyprawy WHERE idWyprawy=NEW.id_wyprawy)
  THEN
    INSERT INTO system_alarmowy(wiadomosc) VALUES('Tesciowa nadchodzi!!!');
  END IF;
END
$$ 
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE avg_sum_max(OUT avg DOUBLE, OUT sum DOUBLE, OUT max DOUBLE)
BEGIN
 SELECT AVG(udzwig), SUM(udzwig), MAX(udzwig) INTO avg, sum, max FROM kreatura;
END
$$
DELIMITER;
